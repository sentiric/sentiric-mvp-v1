// src/dialog_flow/dialog_orchestrator.js (YENÄ° VE AKILLI HALÄ°)

const aiHandler = require('../core/ai-handler');
const dbHandler = require('../core/db-handler');
const knowledgeBase = require('../../data/knowledge_base.json');
const hotelScenario = require('../scenarios/hotel_booking');
const informationRequestScenario = require('../scenarios/information_request');

class DialogOrchestrator {
    constructor() {
        console.log("[DialogOrchestrator] âœ… Function-Calling tabanlÄ± Dialog Orchestrator baÅŸlatÄ±ldÄ±.");
    }

    async processUserMessage(session, userText) {
        let spokenResponse;
        let displayData;
        let resetSessionScenario = false;

        // 1. Niyet Belirleme: KullanÄ±cÄ± ne istiyor? Bilgi mi, iÅŸlem mi?
        // Bu basit belirlemeyi hala yapabiliriz.
        const isInfoRequest = informationRequestScenario.trigger_keywords.some(k => userText.toLowerCase().includes(k));

        if (isInfoRequest) {
            // RAG senaryosu
            spokenResponse = await aiHandler.answerQuestionWithContext(userText, knowledgeBase);
            displayData = { type: 'info_request', text: `ğŸ’¬ ${spokenResponse}` };
            resetSessionScenario = true;
        } else {
            // Ä°ÅŸlem Senaryosu (Otel Rezervasyonu)
            // LLM'e kullanabileceÄŸi araÃ§larÄ± sun
            const availableTools = [ hotelScenario.tool_definition ];
            
            // AI'dan bir eylem talep et
            const action = await aiHandler.getAiAction(userText, availableTools);

            if (action.type === 'function_call' && action.name === 'otel_rezervasyonu_yap') {
                // LLM, rezervasyon yapmak iÃ§in yeterli bilgiye sahip olduÄŸuna karar verdi!
                console.log("[DialogOrchestrator] Eylem yÃ¼rÃ¼tÃ¼lÃ¼yor: otel_rezervasyonu_yap");
                const reservationParams = action.arguments;
                
                // VeritabanÄ±na kaydet ve gÃ¶rsel bul
                const reservationData = { type: hotelScenario.id, params: reservationParams, status: 'confirmed' };
                const imageUrl = await aiHandler.getImageUrl(reservationParams.location);
                reservationData.imageUrl = imageUrl;
                const newReservation = await dbHandler.saveReservation(reservationData);
                
                // KullanÄ±cÄ±ya onay mesajÄ±
                spokenResponse = `Harika! Rezervasyonunuzu oluÅŸturdum. ${reservationParams.location} ÅŸehrinde, ${reservationParams.checkin_date} tarihinde, ${reservationParams.people_count} kiÅŸi iÃ§in yeriniz ayrÄ±ldÄ±. Onay detaylarÄ± ekranda gÃ¶steriliyor.`;
                displayData = { type: 'confirmation_card', data: newReservation };
                resetSessionScenario = true;

            } else if (action.type === 'text_response') {
                // LLM, fonksiyonu Ã§aÄŸÄ±ramadÄ±, Ã§Ã¼nkÃ¼ bilgi eksik. Bu yÃ¼zden kullanÄ±cÄ±ya soru soruyor.
                spokenResponse = action.content;
                displayData = { type: 'info_request', text: `ğŸ’¬ ${spokenResponse}` };
            } else {
                // Beklenmedik bir durum
                spokenResponse = "ÃœzgÃ¼nÃ¼m, ÅŸu anda ne yapacaÄŸÄ±mdan emin deÄŸilim. LÃ¼tfen tekrar dener misiniz?";
                displayData = { type: 'error', message: spokenResponse };
            }
        }

        return { spokenResponse, displayData, resetSessionScenario };
    }
}

module.exports = new DialogOrchestrator();